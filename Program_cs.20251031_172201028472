using System;
using System.Linq;
using System.Runtime.InteropServices;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Win32;

class ProxyManager
{
    private const string ProxyRegistryPath = @"Software\Microsoft\Windows\CurrentVersion\Internet Settings";

    // Windows API to notify system
    [DllImport("wininet.dll", SetLastError = true)]
    private static extern bool InternetSetOption(IntPtr hInternet, int dwOption, IntPtr lpBuffer, int dwBufferLength);

    private const int INTERNET_OPTION_SETTINGS_CHANGED = 39;
    private const int INTERNET_OPTION_REFRESH = 37;

    // Growl settings (customize as needed)
    private const string GrowlHost = "localhost";
    private const int GrowlPort = 23053;

    static async Task Main(string[] args)
    {
        // Argument mode
        if (args.Length > 0)
        {
            await HandleArgumentsAsync(args);
            return;
        }

        // Interactive mode
        await InteractiveModeAsync();
    }

    static async Task HandleArgumentsAsync(string[] args)
    {
        string command = args[0].ToLower();

        switch (command)
        {
            case "check":
            case "status":
                CheckProxyStatus();
                break;

            case "get":
            case "show":
                GetProxySettings();
                break;

            case "set":
                if (args.Length < 2)
                {
                    PrintError("❌ Format: dotnet run set <proxy_server> [bypass_list]");
                    PrintInfo("💡 Example: dotnet run set 127.0.0.1:8080");
                    PrintInfo("💡 Example: dotnet run set 127.0.0.1:8080 \"<local>;*.example.com\"");
                    return;
                }
                string proxyServer = args[1];
                string? bypassList = args.Length > 2 ? args[2] : null;
                await SetProxyWithArgsAsync(proxyServer, bypassList);
                break;

            case "disable":
            case "off":
                await DisableProxyAsync();
                break;

            case "bypass":
                if (args.Length < 2)
                {
                    PrintError("❌ Format: dotnet run bypass <action> [value]");
                    PrintInfo("💡 Actions: set, add, remove, clear, show");
                    PrintInfo("💡 Example: dotnet run bypass set \"<local>;*.internal.com\"");
                    PrintInfo("💡 Example: dotnet run bypass add \"*.example.com\"");
                    PrintInfo("💡 Example: dotnet run bypass remove \"*.example.com\"");
                    PrintInfo("💡 Example: dotnet run bypass clear");
                    PrintInfo("💡 Example: dotnet run bypass show");
                    return;
                }
                string bypassAction = args[1].ToLower();
                string? bypassValue = args.Length > 2 ? args[2] : null;
                await HandleBypassCommandAsync(bypassAction, bypassValue);
                break;

            case "help":
            case "-h":
            case "--help":
                ShowHelp();
                break;

            default:
                PrintError($"❌ Unknown command: {command}");
                ShowHelp();
                break;
        }
    }

    static void ShowHelp()
    {
        PrintHeader("🔧 Windows Proxy Manager - Help");
        Console.WriteLine();
        PrintSuccess("Interactive Mode (no arguments):");
        Console.WriteLine("  dotnet run");
        Console.WriteLine();
        PrintSuccess("Command Line Mode:");
        Console.WriteLine("  dotnet run check              🔍 Check proxy status");
        Console.WriteLine("  dotnet run get                📋 Show proxy settings");
        Console.WriteLine("  dotnet run set <server>       ⚙️  Set proxy server");
        Console.WriteLine("  dotnet run set <server> <bypass>  Set proxy with bypass list");
        Console.WriteLine("  dotnet run disable            ⛔ Disable proxy");
        Console.WriteLine("  dotnet run bypass <action>    🚫 Manage bypass list");
        Console.WriteLine("  dotnet run help               📖 Show help");
        Console.WriteLine();
        PrintSuccess("Bypass List Actions:");
        Console.WriteLine("  dotnet run bypass show        📋 Show current bypass list");
        Console.WriteLine("  dotnet run bypass set <list>  ⚙️  Set/replace bypass list");
        Console.WriteLine("  dotnet run bypass add <item>  ➕ Add item to bypass list");
        Console.WriteLine("  dotnet run bypass remove <item> ➖ Remove item from bypass list");
        Console.WriteLine("  dotnet run bypass clear       🗑️  Clear all bypass list");
        Console.WriteLine();
        PrintInfo("💡 Examples:");
        Console.ForegroundColor = ConsoleColor.Cyan;
        Console.WriteLine("  dotnet run set 127.0.0.1:8080");
        Console.WriteLine("  dotnet run set 192.168.1.100:3128 \"<local>;*.internal.com\"");
        Console.WriteLine("  dotnet run check");
        Console.WriteLine("  dotnet run disable");
        Console.WriteLine("  dotnet run bypass add \"*.example.com\"");
        Console.WriteLine("  dotnet run bypass remove \"<local>\"");
        Console.ResetColor();
    }

    static async Task InteractiveModeAsync()
    {
        PrintHeader("🌐 Windows Proxy Manager");
        
        while (true)
        {
            Console.WriteLine();
            PrintSuccess("╔══════════════════════════════╗");
            PrintSuccess("║     Choose Operation:        ║");
            PrintSuccess("╠══════════════════════════════╣");
            Console.WriteLine("║  1️⃣  Check Proxy Status      ║");
            Console.WriteLine("║  2️⃣  Get Proxy Settings      ║");
            Console.WriteLine("║  3️⃣  Set Proxy               ║");
            Console.WriteLine("║  4️⃣  Disable Proxy           ║");
            Console.WriteLine("║  5️⃣  Manage Bypass List      ║");
            Console.WriteLine("║  6️⃣  Exit                    ║");
            PrintSuccess("╚══════════════════════════════╝");
            Console.Write("\n👉 Your choice (1-6): ");

            string? choice = Console.ReadLine();

            switch (choice)
            {
                case "1":
                    CheckProxyStatus();
                    break;
                case "2":
                    GetProxySettings();
                    break;
                case "3":
                    await SetProxyInteractiveAsync();
                    break;
                case "4":
                    await DisableProxyAsync();
                    break;
                case "5":
                    await ManageBypassListInteractiveAsync();
                    break;
                case "6":
                    PrintSuccess("\n👋 Thank you for using Proxy Manager!");
                    return;
                default:
                    PrintError("❌ Invalid choice!");
                    break;
            }
        }
    }

    static void CheckProxyStatus()
    {
        try
        {
            Console.WriteLine();
            PrintHeader("🔍 Checking Proxy Status");

            using RegistryKey? key = Registry.CurrentUser.OpenSubKey(ProxyRegistryPath);
            
            if (key == null)
            {
                PrintError("❌ Cannot access proxy registry");
                return;
            }

            object? proxyEnable = key.GetValue("ProxyEnable");
            object? proxyServer = key.GetValue("ProxyServer");
            object? proxyOverride = key.GetValue("ProxyOverride");

            bool isEnabled = proxyEnable != null && (int)proxyEnable == 1;

            Console.WriteLine();
            Console.WriteLine("╔════════════════════════════════════════════════╗");
            if (isEnabled)
            {
                PrintSuccess("║       ✅ STATUS: ACTIVE                         ║");
            }
            else
            {
                PrintWarning("║       ⛔ STATUS: INACTIVE                       ║");
            }
            Console.WriteLine("╠════════════════════════════════════════════════╣");
            
            if (proxyServer != null && !string.IsNullOrWhiteSpace(proxyServer.ToString()))
            {
                Console.ForegroundColor = ConsoleColor.Cyan;
                Console.WriteLine($"║  🌐 Server : {proxyServer,-35}║");
                Console.WriteLine($"║  🚫 Bypass : {(proxyOverride?.ToString() ?? "(not set)"),-35}║");
                Console.ResetColor();
            }
            else
            {
                Console.ForegroundColor = ConsoleColor.Gray;
                Console.WriteLine("║  No proxy configured                           ║");
                Console.ResetColor();
            }
            
            Console.WriteLine("╚════════════════════════════════════════════════╝");
        }
        catch (Exception ex)
        {
            PrintError($"❌ Error: {ex.Message}");
        }
    }

    static void GetProxySettings()
    {
        try
        {
            Console.WriteLine();
            PrintHeader("📋 Proxy Settings");

            using RegistryKey? key = Registry.CurrentUser.OpenSubKey(ProxyRegistryPath);
            
            if (key == null)
            {
                PrintError("❌ Cannot access proxy registry");
                return;
            }

            object? proxyEnable = key.GetValue("ProxyEnable");
            object? proxyServer = key.GetValue("ProxyServer");
            object? proxyOverride = key.GetValue("ProxyOverride");

            bool isEnabled = proxyEnable != null && (int)proxyEnable == 1;

            Console.WriteLine();
            Console.WriteLine("╔════════════════════════════════════════════════╗");
            
            if (isEnabled)
            {
                PrintSuccess("║  📊 Status      : ✅ Active                     ║");
            }
            else
            {
                PrintWarning("║  📊 Status      : ⛔ Inactive                   ║");
            }
            
            Console.ForegroundColor = ConsoleColor.Cyan;
            string server = proxyServer?.ToString() ?? "(not set)";
            string bypass = proxyOverride?.ToString() ?? "(not set)";
            Console.WriteLine($"║  🌐 Server      : {server,-30}║");
            Console.WriteLine($"║  🚫 Bypass List : {bypass,-30}║");
            Console.ResetColor();
            Console.WriteLine("╚════════════════════════════════════════════════╝");
        }
        catch (Exception ex)
        {
            PrintError($"❌ Error: {ex.Message}");
        }
    }

    static async Task SetProxyInteractiveAsync()
    {
        Console.WriteLine();
        PrintHeader("⚙️  Set Proxy Configuration");
        
        Console.Write("\n🌐 Enter proxy server (example: 127.0.0.1:8080): ");
        string? proxyServer = Console.ReadLine();

        if (string.IsNullOrWhiteSpace(proxyServer))
        {
            PrintError("❌ Proxy server cannot be empty!");
            return;
        }

        Console.Write("🚫 Bypass list (separate with ; or Enter for default): ");
        string? bypassList = Console.ReadLine();

        await SetProxyCoreAsync(proxyServer, bypassList);
    }

    static async Task SetProxyWithArgsAsync(string proxyServer, string? bypassList)
    {
        Console.WriteLine();
        PrintHeader("⚙️  Setting Proxy");
        await SetProxyCoreAsync(proxyServer, bypassList);
    }

    static async Task SetProxyCoreAsync(string proxyServer, string? bypassList)
    {
        try
        {
            using RegistryKey? key = Registry.CurrentUser.OpenSubKey(ProxyRegistryPath, true);
            
            if (key == null)
            {
                PrintError("❌ Cannot access proxy registry");
                return;
            }

            // Set proxy server
            key.SetValue("ProxyServer", proxyServer);
            
            // Set bypass list only if provided
            if (!string.IsNullOrWhiteSpace(bypassList))
            {
                key.SetValue("ProxyOverride", bypassList);
            }
            else
            {
                // Remove bypass list if empty
                key.DeleteValue("ProxyOverride", false);
                bypassList = "(none)";
            }
            
            // Enable proxy
            key.SetValue("ProxyEnable", 1, RegistryValueKind.DWord);

            Console.WriteLine();
            Console.WriteLine("╔════════════════════════════════════════════════╗");
            PrintSuccess("║       ✅ PROXY ACTIVATED!                       ║");
            Console.WriteLine("╠════════════════════════════════════════════════╣");
            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine($"║  🌐 Server : {proxyServer,-35}║");
            Console.WriteLine($"║  🚫 Bypass : {bypassList,-35}║");
            Console.ResetColor();
            Console.WriteLine("╚════════════════════════════════════════════════╝");

            // Notify system
            Console.WriteLine();
            PrintInfo("⏳ Notifying system...");
            if (NotifyProxyChange())
            {
                PrintSuccess("✅ System notified successfully! 🚀");
            }

            // Send notifications
            await SendNotificationsAsync("Bypass List Cleared", "All bypass entries removed");
        }
        catch (Exception ex)
        {
            PrintError($"❌ Error: {ex.Message}");
        }
    }

    static async Task SendNotificationsAsync(string title, string message)
    {
        // Try Windows Notification
        bool windowsNotifSuccess = await SendWindowsNotificationAsync(title, message);
        
        // Try Growl Notification
        bool growlNotifSuccess = await SendGrowlNotificationAsync(title, message);

        // Show notification status
        if (!windowsNotifSuccess && !growlNotifSuccess)
        {
            PrintWarning("⚠️  Desktop notifications unavailable");
        }
    }

    static async Task<bool> SendWindowsNotificationAsync(string title, string message)
    {
        try
        {
            // Use PowerShell to send Windows Toast Notification
            var psi = new System.Diagnostics.ProcessStartInfo
            {
                FileName = "powershell.exe",
                Arguments = $@"-NoProfile -ExecutionPolicy Bypass -Command ""
                    [Windows.UI.Notifications.ToastNotificationManager, Windows.UI.Notifications, ContentType = WindowsRuntime] | Out-Null;
                    [Windows.Data.Xml.Dom.XmlDocument, Windows.Data.Xml.Dom.XmlDocument, ContentType = WindowsRuntime] | Out-Null;
                    $template = @'
                    <toast>
                        <visual>
                            <binding template='ToastGeneric'>
                                <text>{title}</text>
                                <text>{message}</text>
                            </binding>
                        </visual>
                    </toast>
                    '@;
                    $xml = New-Object Windows.Data.Xml.Dom.XmlDocument;
                    $xml.LoadXml($template);
                    $toast = [Windows.UI.Notifications.ToastNotification]::new($xml);
                    $notifier = [Windows.UI.Notifications.ToastNotificationManager]::CreateToastNotifier('Proxy Manager');
                    $notifier.Show($toast);
                """,
                UseShellExecute = false,
                CreateNoWindow = true,
                RedirectStandardOutput = true,
                RedirectStandardError = true
            };

            using var process = System.Diagnostics.Process.Start(psi);
            if (process != null)
            {
                await process.WaitForExitAsync();
                return process.ExitCode == 0;
            }
            return false;
        }
        catch (Exception ex)
        {
            // Silently fail - notification is not critical
            System.Diagnostics.Debug.WriteLine($"Windows notification failed: {ex.Message}");
            return false;
        }
    }

    static async Task<bool> SendGrowlNotificationAsync(string title, string message)
    {
        try
        {
            using var client = new HttpClient();
            client.Timeout = TimeSpan.FromSeconds(2);

            // Growl GNTP protocol (simple notification)
            var growlData = new
            {
                application = "Proxy Manager",
                title = title,
                message = message,
                priority = 0
            };

            var json = System.Text.Json.JsonSerializer.Serialize(growlData);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            // Try to send to Growl HTTP API (if available)
            var response = await client.PostAsync($"http://{GrowlHost}:{GrowlPort}/notify", content);
            return response.IsSuccessStatusCode;
        }
        catch (Exception ex)
        {
            // Silently fail - Growl might not be installed
            System.Diagnostics.Debug.WriteLine($"Growl notification failed: {ex.Message}");
            return false;
        }
    }
            {
                PrintSuccess("✅ System notified successfully! 🚀");
            }
            else
            {
                PrintWarning("⚠️  Failed to notify system");
            }

            // Send notifications
            await SendNotificationsAsync("Proxy Activated", $"Server: {proxyServer}\nBypass: {bypassList}");
        }
        catch (Exception ex)
        {
            PrintError($"❌ Error: {ex.Message}");
        }
    }

    static async Task DisableProxyAsync()
    {
        try
        {
            Console.WriteLine();
            PrintHeader("⛔ Disabling Proxy");

            using RegistryKey? key = Registry.CurrentUser.OpenSubKey(ProxyRegistryPath, true);
            
            if (key == null)
            {
                PrintError("❌ Cannot access proxy registry");
                return;
            }

            // Get current proxy before disabling
            object? proxyServer = key.GetValue("ProxyServer");
            object? proxyOverride = key.GetValue("ProxyOverride");

            // Disable proxy
            key.SetValue("ProxyEnable", 0, RegistryValueKind.DWord);

            Console.WriteLine();
            Console.WriteLine("╔════════════════════════════════════════════════╗");
            PrintSuccess("║       ✅ PROXY DISABLED!                        ║");
            Console.WriteLine("╚════════════════════════════════════════════════╝");

            // Notify system
            Console.WriteLine();
            PrintInfo("⏳ Notifying system...");
            if (NotifyProxyChange())
            {
                PrintSuccess("✅ System notified successfully! 🚀");
            }
            else
            {
                PrintWarning("⚠️  Failed to notify system");
            }

            // Send notifications
            string serverInfo = proxyServer != null ? proxyServer.ToString()! : "None";
            await SendNotificationsAsync("Proxy Disabled", $"Previously: {serverInfo}");
        }
        catch (Exception ex)
        {
            PrintError($"❌ Error: {ex.Message}");
        }
    }

    static bool NotifyProxyChange()
    {
        try
        {
            // INTERNET_OPTION_SETTINGS_CHANGED: notify that settings changed
            InternetSetOption(IntPtr.Zero, INTERNET_OPTION_SETTINGS_CHANGED, IntPtr.Zero, 0);
            
            // INTERNET_OPTION_REFRESH: refresh settings
            InternetSetOption(IntPtr.Zero, INTERNET_OPTION_REFRESH, IntPtr.Zero, 0);
            
            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"⚠️  Notify error: {ex.Message}");
            return false;
        }
    }

    static async Task HandleBypassCommandAsync(string action, string? value)
    {
        switch (action)
        {
            case "show":
                ShowBypassList();
                break;
            case "set":
                if (string.IsNullOrWhiteSpace(value))
                {
                    PrintError("❌ Value required for 'set' action");
                    PrintInfo("💡 Example: dotnet run bypass set \"<local>;*.internal.com\"");
                    return;
                }
                await SetBypassListAsync(value);
                break;
            case "add":
                if (string.IsNullOrWhiteSpace(value))
                {
                    PrintError("❌ Value required for 'add' action");
                    PrintInfo("💡 Example: dotnet run bypass add \"*.example.com\"");
                    return;
                }
                await AddToBypassListAsync(value);
                break;
            case "remove":
            case "delete":
                if (string.IsNullOrWhiteSpace(value))
                {
                    PrintError("❌ Value required for 'remove' action");
                    PrintInfo("💡 Example: dotnet run bypass remove \"*.example.com\"");
                    return;
                }
                await RemoveFromBypassListAsync(value);
                break;
            case "clear":
                await ClearBypassListAsync();
                break;
            default:
                PrintError($"❌ Unknown action: {action}");
                PrintInfo("💡 Available actions: show, set, add, remove, clear");
                break;
        }
    }

    static async Task ManageBypassListInteractiveAsync()
    {
        Console.WriteLine();
        PrintHeader("🚫 Manage Bypass List");
        
        while (true)
        {
            Console.WriteLine();
            PrintSuccess("╔══════════════════════════════╗");
            PrintSuccess("║   Bypass List Operations:   ║");
            PrintSuccess("╠══════════════════════════════╣");
            Console.WriteLine("║  1️⃣  Show Bypass List        ║");
            Console.WriteLine("║  2️⃣  Set/Replace Bypass List ║");
            Console.WriteLine("║  3️⃣  Add Item to List        ║");
            Console.WriteLine("║  4️⃣  Remove Item from List   ║");
            Console.WriteLine("║  5️⃣  Clear All List          ║");
            Console.WriteLine("║  6️⃣  Back to Main Menu       ║");
            PrintSuccess("╚══════════════════════════════╝");
            Console.Write("\n👉 Your choice (1-6): ");

            string? choice = Console.ReadLine();

            switch (choice)
            {
                case "1":
                    ShowBypassList();
                    break;
                case "2":
                    Console.Write("\n📝 Enter bypass list (separate with ;): ");
                    string? newList = Console.ReadLine();
                    if (!string.IsNullOrWhiteSpace(newList))
                    {
                        await SetBypassListAsync(newList);
                    }
                    else
                    {
                        PrintError("❌ Bypass list cannot be empty!");
                    }
                    break;
                case "3":
                    Console.Write("\n➕ Enter item to add: ");
                    string? addItem = Console.ReadLine();
                    if (!string.IsNullOrWhiteSpace(addItem))
                    {
                        await AddToBypassListAsync(addItem);
                    }
                    else
                    {
                        PrintError("❌ Item cannot be empty!");
                    }
                    break;
                case "4":
                    Console.Write("\n➖ Enter item to remove: ");
                    string? removeItem = Console.ReadLine();
                    if (!string.IsNullOrWhiteSpace(removeItem))
                    {
                        await RemoveFromBypassListAsync(removeItem);
                    }
                    else
                    {
                        PrintError("❌ Item cannot be empty!");
                    }
                    break;
                case "5":
                    Console.Write("\n⚠️  Are you sure you want to clear all bypass list? (y/n): ");
                    string? confirm = Console.ReadLine();
                    if (confirm?.ToLower() == "y" || confirm?.ToLower() == "yes")
                    {
                        await ClearBypassListAsync();
                    }
                    else
                    {
                        PrintInfo("ℹ️  Operation cancelled");
                    }
                    break;
                case "6":
                    return;
                default:
                    PrintError("❌ Invalid choice!");
                    break;
            }
        }
    }

    static void ShowBypassList()
    {
        try
        {
            Console.WriteLine();
            PrintHeader("📋 Current Bypass List");

            using RegistryKey? key = Registry.CurrentUser.OpenSubKey(ProxyRegistryPath);
            
            if (key == null)
            {
                PrintError("❌ Cannot access proxy registry");
                return;
            }

            object? proxyOverride = key.GetValue("ProxyOverride");

            Console.WriteLine();
            if (proxyOverride == null || string.IsNullOrWhiteSpace(proxyOverride.ToString()))
            {
                Console.WriteLine("╔════════════════════════════════════════════════╗");
                PrintWarning("║       ⚠️  NO BYPASS LIST CONFIGURED            ║");
                Console.WriteLine("╚════════════════════════════════════════════════╝");
                return;
            }

            string bypassList = proxyOverride.ToString()!;
            string[] items = bypassList.Split(';');

            Console.WriteLine("╔════════════════════════════════════════════════╗");
            PrintSuccess($"║  Total Items: {items.Length,-34}║");
            Console.WriteLine("╠════════════════════════════════════════════════╣");
            
            for (int i = 0; i < items.Length; i++)
            {
                Console.ForegroundColor = ConsoleColor.Cyan;
                Console.WriteLine($"║  {i + 1,2}. {items[i],-43}║");
                Console.ResetColor();
            }
            
            Console.WriteLine("╚════════════════════════════════════════════════╝");
        }
        catch (Exception ex)
        {
            PrintError($"❌ Error: {ex.Message}");
        }
    }

    static async Task SetBypassListAsync(string bypassList)
    {
        try
        {
            Console.WriteLine();
            PrintHeader("⚙️  Setting Bypass List");

            using RegistryKey? key = Registry.CurrentUser.OpenSubKey(ProxyRegistryPath, true);
            
            if (key == null)
            {
                PrintError("❌ Cannot access proxy registry");
                return;
            }

            key.SetValue("ProxyOverride", bypassList);

            Console.WriteLine();
            Console.WriteLine("╔════════════════════════════════════════════════╗");
            PrintSuccess("║       ✅ BYPASS LIST SET!                       ║");
            Console.WriteLine("╠════════════════════════════════════════════════╣");
            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine($"║  🚫 List: {bypassList,-38}║");
            Console.ResetColor();
            Console.WriteLine("╚════════════════════════════════════════════════╝");

            // Notify system
            Console.WriteLine();
            PrintInfo("⏳ Notifying system...");
            if (NotifyProxyChange())
            {
                PrintSuccess("✅ System notified successfully! 🚀");
            }

            // Send notifications
            await SendNotificationsAsync("Bypass List Updated", $"New list: {bypassList}");
        }
        catch (Exception ex)
        {
            PrintError($"❌ Error: {ex.Message}");
        }
    }

    static async Task AddToBypassListAsync(string item)
    {
        try
        {
            Console.WriteLine();
            PrintHeader("➕ Adding to Bypass List");

            using RegistryKey? key = Registry.CurrentUser.OpenSubKey(ProxyRegistryPath, true);
            
            if (key == null)
            {
                PrintError("❌ Cannot access proxy registry");
                return;
            }

            object? proxyOverride = key.GetValue("ProxyOverride");
            string currentList = proxyOverride?.ToString() ?? "";

            // Check if item already exists
            string[] items = currentList.Split(';', StringSplitOptions.RemoveEmptyEntries);
            if (items.Any(i => i.Trim().Equals(item.Trim(), StringComparison.OrdinalIgnoreCase)))
            {
                Console.WriteLine();
                Console.WriteLine("╔════════════════════════════════════════════════╗");
                PrintWarning("║       ⚠️  ITEM ALREADY EXISTS                  ║");
                Console.WriteLine("╠════════════════════════════════════════════════╣");
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine($"║  Item: {item,-41}║");
                Console.ResetColor();
                Console.WriteLine("╚════════════════════════════════════════════════╝");
                return;
            }

            // Add new item
            string newList = string.IsNullOrWhiteSpace(currentList) 
                ? item 
                : $"{currentList};{item}";

            key.SetValue("ProxyOverride", newList);

            Console.WriteLine();
            Console.WriteLine("╔════════════════════════════════════════════════╗");
            PrintSuccess("║       ✅ ITEM ADDED!                            ║");
            Console.WriteLine("╠════════════════════════════════════════════════╣");
            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine($"║  ➕ Added: {item,-38}║");
            Console.ResetColor();
            Console.WriteLine("╚════════════════════════════════════════════════╝");

            // Notify system
            Console.WriteLine();
            PrintInfo("⏳ Notifying system...");
            if (NotifyProxyChange())
            {
                PrintSuccess("✅ System notified successfully! 🚀");
            }

            // Send notifications
            await SendNotificationsAsync("Bypass Item Added", $"Added: {item}");
        }
        catch (Exception ex)
        {
            PrintError($"❌ Error: {ex.Message}");
        }
    }

    static async Task RemoveFromBypassListAsync(string item)
    {
        try
        {
            Console.WriteLine();
            PrintHeader("➖ Removing from Bypass List");

            using RegistryKey? key = Registry.CurrentUser.OpenSubKey(ProxyRegistryPath, true);
            
            if (key == null)
            {
                PrintError("❌ Cannot access proxy registry");
                return;
            }

            object? proxyOverride = key.GetValue("ProxyOverride");
            
            if (proxyOverride == null || string.IsNullOrWhiteSpace(proxyOverride.ToString()))
            {
                Console.WriteLine();
                Console.WriteLine("╔════════════════════════════════════════════════╗");
                PrintWarning("║       ⚠️  BYPASS LIST IS EMPTY                 ║");
                Console.WriteLine("╚════════════════════════════════════════════════╝");
                return;
            }

            string currentList = proxyOverride.ToString()!;
            string[] items = currentList.Split(';', StringSplitOptions.RemoveEmptyEntries);

            // Find and remove item (case insensitive)
            var remainingItems = items.Where(i => !i.Trim().Equals(item.Trim(), StringComparison.OrdinalIgnoreCase)).ToArray();

            if (remainingItems.Length == items.Length)
            {
                Console.WriteLine();
                Console.WriteLine("╔════════════════════════════════════════════════╗");
                PrintWarning("║       ⚠️  ITEM NOT FOUND                       ║");
                Console.WriteLine("╠════════════════════════════════════════════════╣");
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine($"║  Item: {item,-41}║");
                Console.ResetColor();
                Console.WriteLine("╚════════════════════════════════════════════════╝");
                return;
            }

            string newList = string.Join(";", remainingItems);
            
            if (string.IsNullOrWhiteSpace(newList))
            {
                key.DeleteValue("ProxyOverride", false);
            }
            else
            {
                key.SetValue("ProxyOverride", newList);
            }

            Console.WriteLine();
            Console.WriteLine("╔════════════════════════════════════════════════╗");
            PrintSuccess("║       ✅ ITEM REMOVED!                          ║");
            Console.WriteLine("╠════════════════════════════════════════════════╣");
            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine($"║  ➖ Removed: {item,-36}║");
            if (string.IsNullOrWhiteSpace(newList))
            {
                Console.WriteLine($"║  🚫 New List: (empty){"",29}║");
            }
            else
            {
                Console.WriteLine($"║  🚫 New List: {newList,-34}║");
            }
            Console.ResetColor();
            Console.WriteLine("╚════════════════════════════════════════════════╝");

            // Notify system
            Console.WriteLine();
            PrintInfo("⏳ Notifying system...");
            if (NotifyProxyChange())
            {
                PrintSuccess("✅ System notified successfully! 🚀");
            }

            // Send notifications
            await SendNotificationsAsync("Bypass Item Removed", $"Removed: {item}");
        }
        catch (Exception ex)
        {
            PrintError($"❌ Error: {ex.Message}");
        }
    }

    static async Task ClearBypassListAsync()
    {
        try
        {
            Console.WriteLine();
            PrintHeader("🗑️  Clearing Bypass List");

            using RegistryKey? key = Registry.CurrentUser.OpenSubKey(ProxyRegistryPath, true);
            
            if (key == null)
            {
                PrintError("❌ Cannot access proxy registry");
                return;
            }

            key.DeleteValue("ProxyOverride", false);

            Console.WriteLine();
            Console.WriteLine("╔════════════════════════════════════════════════╗");
            PrintSuccess("║       ✅ BYPASS LIST CLEARED!                   ║");
            Console.WriteLine("╚════════════════════════════════════════════════╝");

            // Notify system
            Console.WriteLine();
            PrintInfo("⏳ Notifying system...");
            if (NotifyProxyChange())